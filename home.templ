package main

import "fmt"
import "strings"

type HomeProps struct {
	Nodes []Node
	Path  string
	Video string
}

func getPath(currentPath, video string) string {
	parts := strings.Split(currentPath, "/")
	parts[1] = "media" // change 'home' to 'media'
	return fmt.Sprintf("%s/%s", strings.Join(parts, "/"), video)
}

type crumb struct {
	name string
	path string
}

func getCrumbs(currentPath string) []crumb {
	parts := strings.Split(currentPath, "/")[1:] // don't include '/home'
	root := "/"
	fullPath := make([]string, 0, len(parts))
	crumbs := make([]crumb, 0, len(parts))

	for i, v := range parts {
		fullPath = append(fullPath, v)
		path := root + strings.Join(fullPath, "/")

		if i == 0 {
			path += "/"
		}

		crumbs = append(crumbs, crumb{
			name: v,
			path: path,
		})
	}

	return crumbs
}

templ Home(props HomeProps) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Document</title>
			<link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet"/>
			<style>
				*, *::before, *::after {
					box-sizing: border-box;
				}

				* {
					margin: 0;
				}

				main {
					height: 100vh;
					padding: 10px;
					width: 100vw;
				}

				ul {
					list-style: none;
					padding: 0;
				}

				#crumbs {
					display: flex;
					gap: 2px;
				}

				#title {
					font-size: 18px;
					text-align: center;
				}

				#video-container {
					height: 405px;
					width: 720px;
					margin: 0 auto;
				}

				#video {
					height: 100%;
					width: 100%;
				}

				#episodes {
					display: flex;
					flex-direction: column;
					gap: 4px;
					width: 680px;
					height: 200px;
					overflow: scroll;
					margin: 10px auto 0 auto;
				}

				.episode {
					border: 1px solid black;
					padding: 2px 6px;	
				}

				.episode.active {
					background: #5bc0de;
					border-color: #007bff;
				}

				.episode a {
					color: inherit;
					display: block;
					text-decoration: none;
				}

			</style>
			<script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12"></script>
		</head>
		<body>
			<main>
				<ul id="crumbs">
					for _, v := range getCrumbs(props.Path) {
						<li>
							<a href={ templ.SafeURL(v.path) }>{ v.name }/</a>
						</li>
					}
				</ul>
				if props.Video == "" {
					<ul>
						for _, v:= range props.Nodes {
							<li>
								if v.IsDir {
									<a hx-boost="true" href={ templ.URL(fmt.Sprintf("%s/%s", props.Path, v.Name)) }>
										{ v.Name }
									</a>
								} else {
									<a href={ templ.URL(fmt.Sprintf("%s?video=%s", props.Path, v.Name)) }>
										{ v.Name }
									</a>
								}
							</li>
						}
					</ul>
				} else {
					<h1 id="title">{ props.Video }</h1>
					<div id="video-container">
						<video
							id="video"
							class="video-js"
							controls
							preload="auto"
							data-video={ templ.EscapeString(props.Video) }
						>
							<source src={ templ.EscapeString(getPath(props.Path, props.Video)) } type="video/mp4"/>
						</video>
						<script>
					  function timestamp(id) {
							const key = `timestamp_${id}`

							function get() {
								const value = localStorage.getItem(key);
								const timestamp = parseFloat(value)

								if (isNaN(timestamp)) {
									return 0
								}

								return timestamp
							}

							function set(timestamp) {
								localStorage.setItem(key, timestamp)
							}

							return [get, set]
						}

						const videoEl = document.querySelector("#video");
						const [getTimestamp, setTimestamp] = timestamp(videoEl.dataset.video)
						const player = videojs(videoEl);

						player.on("ready", function() {
							player.currentTime(getTimestamp());
						});

						player.on("timeupdate", function() {
							// https://docs.videojs.com/player#readyState
							if (this.readyState() === 4) {
								setTimestamp(this.currentTime());
							}
						});
					</script>
					</div>
					<ul id="episodes">
						for _, v:= range props.Nodes {
							<li
								class={ "episode", templ.KV("active", v.Name == props.Video) }
							>
								if !v.IsDir {
									<a href={ templ.URL(fmt.Sprintf("%s?video=%s", props.Path, v.Name)) }>
										{ v.Name }
									</a>
								}
							</li>
						}
					</ul>
				}
			</main>
		</body>
	</html>
}
